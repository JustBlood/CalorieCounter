package ru.kirill.output;

import ru.kirill.bl.StepTracker;
import ru.kirill.bl.TrackerCommand;

import static ru.kirill.bl.TrackerCommand.*;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class Main {
    private static class TrackerCommandExecutor {
        private TrackerCommand command;
        private static final Map<TrackerCommand, Runnable> commandToAction;

        static {
            commandToAction = new HashMap<>();
            commandToAction.put(Help, Main::printStartMessage);
            commandToAction.put(Exit, () -> {
                System.out.println("–ù–∞–¥–µ—é—Å—å, –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –í–∞–º –ø–æ–º–æ–≥–ª–æ! –£–¥–∞—á–∏!");
                System.exit(0);
            });
            commandToAction.put(ChangeGoal, () -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å (–ü—Ä–∏–º–µ—Ä: 10000): ");
                var goal = sc.nextLine();
                try {
                    int intGoal = Integer.parseInt(goal);
                    tracker.setGoal(intGoal);
                } catch (NumberFormatException e) {
                    printErrorMessage("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                }


            });
            commandToAction.put(PrintStat, () -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: ");
                String month = sc.nextLine();
                System.out.println(tracker.getStatistic(month));
            });
            commandToAction.put(AddSteps, () -> {
                addOrSetSteps(true);
            });
            commandToAction.put(EnterSteps, () -> {
                addOrSetSteps(false);
            });
        }

        private static void addOrSetSteps(boolean isAddingSteps) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤ (–ü—Ä–∏–º–µ—Ä: –ê–ø—Ä–µ–ª—å): ");
            String month = sc.nextLine();
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–≤ (–ü—Ä–∏–º–µ—Ä: 10): ");
            int day;
            String enter = sc.nextLine();
            if (isInteger(enter)) {
                day = Integer.parseInt(enter);
            } else { printErrorMessage("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."); return; }
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ü—Ä–∏–º–µ—Ä: 3400): ");
            int steps;
            enter = sc.nextLine();
            if (isInteger(enter)) {
                steps = Integer.parseInt(enter);
            } else { printErrorMessage("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."); return; }
            try {
                tracker.saveStepsByMonthDay(month, day, steps, isAddingSteps);
            } catch (IllegalArgumentException e) {
                printErrorMessage(String.format("–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 31," +
                        "–∞ –º–µ—Å—è—Ü —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ %s", Help.getDescription()));
            }
        }

        private static boolean isInteger(String str) {
            try {
                Integer.parseInt(str);
                return true;
            } catch (NumberFormatException e) { return false; }
        }

        public static void execute(TrackerCommand command) {
            commandToAction.get(command).run();
        }
    }
    private static final Scanner sc = new Scanner(System.in);
    private static final StepTracker tracker = new StepTracker();

    public static void main(String[] args) throws ParseException {
        printStartMessage();
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");
            TrackerCommand command;
            try {
                command = getCommandFromConsole();
            } catch (NoSuchElementException e) {
                printErrorMessage("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏—Ç–µ –ü–æ–º–æ—â—å");
                continue;
            }
            TrackerCommandExecutor.execute(command);
        }
    }

    private static void printErrorMessage(String title) {
        System.out.printf("–û—à–∏–±–∫–∞! %s%n", title);
    }

    private static TrackerCommand getCommandFromConsole() {
        String enteredString = sc.nextLine();
        for (var val : TrackerCommand.values()) {
            if (enteredString.strip().equals(val.getDescription())) {
                return val;
            }
        }
        throw new NoSuchElementException("–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    private static void printStartMessage() {
        System.out.println(String.format("""
                               üîÜ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏üîÜ
                                    üëüStepTrackerüëü
                –ò–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —à–∞–≥–∏ –∑–∞ –¥–µ–Ω—å –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! üìà
                üéØ –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –ø–æ —à–∞–≥–∞–º –Ω–∞ –¥–µ–Ω—å (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ 10.000), –≤–≤–µ–¥–∏ %s,
                üö∂‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–≤–µ–¥–∏ %s,
                ‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏ –∫ –Ω—É–∂–Ω–æ–π –¥–∞—Ç–µ, –≤–≤–µ–¥–∏ %s,
                üìú –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü, –≤–≤–µ–¥–∏ %s
                
                üö™ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–≤–µ–¥–∏ %s.
                                
                             üîë–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —É—Å–ø–µ—Ö–æ–≤!üîë
                """, ChangeGoal.getDescription(), EnterSteps.getDescription(),
                AddSteps.getDescription(), PrintStat.getDescription(), Help.getDescription()));
    }
}
